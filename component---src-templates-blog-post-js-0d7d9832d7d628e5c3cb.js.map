{"version":3,"sources":["webpack:///./src/constants/pluralize-reading-time.js","webpack:///./src/templates/blog-post.js"],"names":["pluralizeReadingTime","time","data","pageContext","post","markdownRemark","previous","next","publicUrl","fields","slug","title","frontmatter","description","excerpt","keywords","className","style","margin","published","longDate","shortDate","timeToRead","marginTop","fluid","cover","childImageSharp","alt","coverAuthor","href","coverOriginalUrl","dangerouslySetInnerHTML","__html","html","target","rel","display","flexWrap","justifyContent","listStyle","padding","textDecoration","to","query"],"mappings":"2FAAe,SAASA,EAAqBC,GAC3C,OAAUA,EAAV,KAAkBA,EAAO,EAAI,OAAS,OAAtC,QADF,mC,kCCAA,2IAQe,sBAA4B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACEC,EAASF,EAAzBG,eACAC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KACZC,EAAS,wCAA2CJ,EAAKK,OAAOC,KAEtE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAK,GAAKP,EAAKQ,YAAYD,MAC3BE,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,QAClDC,SAAUX,EAAKQ,YAAYG,WAE7B,yBAAKC,UAAU,aACb,wBAAIC,MAAO,CAAEC,OAAQ,IAClBd,EAAKQ,YAAYO,UAAY,GAAK,UAClCf,EAAKQ,YAAYD,OAEpB,2BAAOA,MAAOP,EAAKQ,YAAYQ,UAC5BhB,EAAKQ,YAAYS,UADpB,KACwC,IACrCrB,YAAqBI,EAAKkB,aAE7B,yBAAKL,MAAO,CAAEM,UAAU,SACtB,kBAAC,IAAD,CACEC,MAAOpB,EAAKQ,YAAYa,MAAMC,gBAAgBF,MAC9CG,IAAKvB,EAAKQ,YAAYgB,eAG1B,0CACW,IACT,uBAAGC,KAAMzB,EAAKQ,YAAYkB,kBACvB1B,EAAKQ,YAAYgB,aACf,KAEP,yBACEX,MAAO,CACLC,OAAO,UAETa,wBAAyB,CAAEC,OAAQ5B,EAAK6B,QAE1C,+BACE,uBACEC,OAAO,SACPC,IAAI,+BACJN,KAAI,gCAAkCrB,GAHxC,sBAMK,IAPP,IAQW,IACT,uBACE0B,OAAO,SACPC,IAAI,+BACJN,KAAI,kEACFzB,EAAKK,OAAOC,MAJhB,6BAUF,6BACA,wBACEO,MAAO,CACLmB,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,EACTtB,OAAQ,IAGV,4BACGZ,GACC,kBAAC,OAAD,CACEW,MAAO,CAAEwB,eAAe,QACxBC,GAAIpC,EAASG,OAAOC,KACpByB,IAAI,QAHN,KAKK7B,EAASM,YAAYD,QAI9B,4BACGJ,GACC,kBAAC,OAAD,CACEU,MAAO,CAAEwB,eAAe,QACxBC,GAAInC,EAAKE,OAAOC,KAChByB,IAAI,QAEH5B,EAAKK,YAAYD,MALpB,WAeP,IAAMgC,EAAK","file":"component---src-templates-blog-post-js-0d7d9832d7d628e5c3cb.js","sourcesContent":["export default function pluralizeReadingTime(time) {\n  return `${time} ${time > 1 ? 'mins' : 'min'} read`;\n}\n","import React from \"react\"\nimport { Link, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n\nimport Layout from \"../components/layout\"\nimport SEO from '../components/seo';\nimport pluralizeReadingTime from \"../constants/pluralize-reading-time\";\n\nexport default ({ data, pageContext }) => {\n  const { markdownRemark: post } = data;\n  const { previous, next } = pageContext;\n  const publicUrl = `https://daliannyvieira.github.io/blog${post.fields.slug}`;\n\n  return (\n    <Layout>\n      <SEO\n        title={`${post.frontmatter.title}`}\n        description={post.frontmatter.description || post.excerpt}\n        keywords={post.frontmatter.keywords}\n      />\n      <div className=\"blog-post\">\n        <h1 style={{ margin: 0 }}>\n          {post.frontmatter.published ? '' : 'DRAFT: '}\n          {post.frontmatter.title}\n        </h1>\n        <small title={post.frontmatter.longDate}>\n          {post.frontmatter.shortDate} &middot;{' '}\n          {pluralizeReadingTime(post.timeToRead)}\n        </small>\n        <div style={{ marginTop: `1rem` }}>\n          <Image\n            fluid={post.frontmatter.cover.childImageSharp.fluid}\n            alt={post.frontmatter.coverAuthor}\n          />\n        </div>\n        <small>\n          Photo by{' '}\n          <a href={post.frontmatter.coverOriginalUrl}>\n            {post.frontmatter.coverAuthor}\n          </a>{' '}\n        </small>\n        <div\n          style={{\n            margin: `1rem 0`,\n          }}\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        />\n        <small>\n          <a\n            target=\"_blank\"\n            rel=\"nofollow noopener noreferrer\"\n            href={`https://twitter.com/search?q=${publicUrl}`}\n          >\n            Discuss on Twitter\n          </a>{' '}\n          &middot;{' '}\n          <a\n            target=\"_blank\"\n            rel=\"nofollow noopener noreferrer\"\n            href={`https://github.com/daliannyvieira/blog/tree/master/content/blog${\n              post.fields.slug\n            }`}\n          >\n            Edit this post on GitHub\n          </a>\n        </small>\n        <hr/>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n            margin: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link\n                style={{ textDecoration: `none` }}\n                to={previous.fields.slug}\n                rel=\"prev\"\n              >\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link\n                style={{ textDecoration: `none` }}\n                to={next.fields.slug}\n                rel=\"next\"\n              >\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        shortDate: date(formatString: \"MMMM DD, YYYY\")\n        longDate: date(formatString: \"MMMM DD, YYYY, h:mm:ss a\")\n        description\n        categories\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        coverAuthor\n        coverOriginalUrl\n        keywords\n        published\n      }\n    }\n  }\n`;"],"sourceRoot":""}