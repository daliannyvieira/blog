{"version":3,"sources":["webpack://daliannyvieira/./src/templates/blog-post.js","webpack://daliannyvieira/./src/constants/pluralize-reading-time.js"],"names":["Container","styled","animated","Legend","Twitter","data","pageContext","post","markdownRemark","previous","next","publicUrl","fields","slug","useState","toggle","setToggle","useEffect","Spring","native","to","rotate","opacity","time","style","title","frontmatter","description","excerpt","keywords","shortDate","timeToRead","margin","published","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","Link","textDecoration","rel","size","SOCIAL","icon","target","href"],"mappings":"sPAUMA,GAAYC,QAAOC,gBAAV,0EAAGD,CAAH,81BAuETE,EAASF,oBAAH,4DAAGA,CAAH,sFAcNG,EAAUH,oBAAH,6DAAGA,CAAH,0FAsJb,EAxIa,SAAC,GAA2B,IAAzBI,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACIC,EAASF,EAAzBG,eACAC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KACZC,EAAS,mCAAsCJ,EAAKK,OAAOC,KAEjE,GAA4BC,eAAS,GAA9BC,EAAP,KAAeC,EAAf,KAUA,OARAC,gBAAU,WAEND,GAAU,KAIX,IAGD,gBAAC,IAAD,KACE,gBAAC,EAAAE,OAAD,CACEC,QAAM,EACNC,GAAI,CACFC,OAAQN,EAAS,OAAS,SAC1BO,QAASP,EAAS,EAAG,KAGtB,gBCrIoCQ,EDqIjCD,EAAH,EAAGA,QAAH,OACC,gBAACtB,EAAD,CACEwB,MAAO,CACLF,QAASA,IAGb,gBAAC,IAAD,CACEG,MAAK,GAAKlB,EAAKmB,YAAYD,MAC3BE,YAAapB,EAAKmB,YAAYC,aAAepB,EAAKqB,QAClDC,SAAUtB,EAAKmB,YAAYG,WAE3B,gBAAC1B,EAAD,KACGI,EAAKmB,YAAYI,UADpB,KACwC,KCjJPP,EDkJThB,EAAKwB,YCjJvC,KAAkBR,EAAO,EAAI,OAAS,OAAtC,eDmJU,sBAAIC,MAAO,CAAEQ,OAAQ,cAClBzB,EAAKmB,YAAYO,UAAY,GAAK,UAClC1B,EAAKmB,YAAYD,OAEpB,uBACED,MAAO,CACLQ,OAAO,UAETE,wBAAyB,CAAEC,OAAQ5B,EAAK6B,QAE1C,sBACEZ,MAAO,CACLa,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,EACTT,OAAQ,IAGV,0BACGvB,GACC,gBAAC,EAAAiC,KAAD,CACElB,MAAO,CAAEmB,eAAe,QACxBvB,GAAIX,EAASG,OAAOC,KACpB+B,IAAI,QAHN,KAKKnC,EAASiB,YAAYD,QAI9B,0BACGf,GACC,gBAAC,EAAAgC,KAAD,CACElB,MAAO,CAAEmB,eAAe,QACxBvB,GAAIV,EAAKE,OAAOC,KAChB+B,IAAI,QAEHlC,EAAKgB,YAAYD,MALpB,QAUN,gBAACrB,EAAD,KACE,gBAAC,IAAD,CACEyC,KAAMC,YACNC,KAAMD,YACNrB,MAAK,cAAgBqB,cAEtB,IACD,qBACEE,OAAO,SACPJ,IAAI,+BACJK,KAAI,yCAA2CtC,GAHjD","file":"component---src-templates-blog-post-js-8412c4660f4805b4d717.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from \"../components/layout\"\nimport Seo from '../components/seo';\nimport pluralizeReadingTime from \"../constants/pluralize-reading-time\";\nimport styled from 'styled-components';\nimport { Spring, animated } from 'react-spring'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SOCIAL from '../constants/social';\n\nconst Container = styled(animated.div)`\n  width: 90vw;\n  padding: 4rem 2.45rem 4rem;\n  border-radius: .5rem;\n  position: relative;\n  border-color: #ffb8d1;\n  border-style: solid;\n  border-width: 1px;\n  background: #fff;\n  box-shadow: 0 4px 6px -1px rgba(0,0,0,.1), 0 2px 4px -1px rgba(0,0,0,.06);\n  border-color: #f5f5f5;\n  border-style: solid;\n  border-width: 1px;\n\n  blockquote {\n    max-width: 90%;\n    margin: 0 auto;\n  }\n\n  blockquote p {\n    text-align: center;\n    font-size: 1.25rem;\n    line-height: 1.65rem;\n    display: inline-block;\n    margin: 0.8em auto;\n  }\n\n  blockquote::before {\n    content: \"\";\n    display: block;\n    width: 40%;\n    margin: 2rem auto 1rem;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n\n  blockquote::after {\n    content: \"\";\n    display: block;\n    width: 40%;\n    margin: 1rem auto 2rem;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n\n  strong {\n    font-weight 800;\n  }\n\n  @media (min-width: 992px) {\n    max-width: 55vw;\n\n    p, ul {\n      font-size: 1.15rem;\n      line-height: 1.95rem;\n    }\n\n    blockquote p {\n      font-size: 1.75rem;\n      line-height: 2.25rem;\n    }\n  }\n\n  small a {\n    color: #6DDAF2;\n  }\n\n  svg {\n    color: #6DDAF2;\n  }\n`;\n\n\nconst Legend = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 1rem;\n\n  svg {\n    color: #6DDAF2;\n  }\n  a { \n    color: #6DDAF2;\n  }\n`;\n\nconst Twitter = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding: 1rem;\n\n  svg {\n    color: #6DDAF2;\n  }\n  a { \n    color: #6DDAF2;\n  }\n`;\n\nconst Blog = ({ data, pageContext }) => {\n  const { markdownRemark: post } = data;\n  const { previous, next } = pageContext;\n  const publicUrl = `https://daliannyvieira.github.io${post.fields.slug}`;\n\n  const [toggle, setToggle] = useState(true)\n\n  useEffect(() => {\n    function handleToggle() {\n      setToggle(false)\n    }\n\n    handleToggle();\n  }, []);\n\n  return (\n    <Layout>\n      <Spring\n        native\n        to={{\n          rotate: toggle ? '0deg' : '180deg',\n          opacity: toggle ? 0: 1,\n        }}\n        >\n        {({ opacity }) => (\n          <Container\n            style={{\n              opacity: opacity,\n            }}\n          >\n          <Seo\n            title={`${post.frontmatter.title}`}\n            description={post.frontmatter.description || post.excerpt}\n            keywords={post.frontmatter.keywords}\n          />\n            <Legend>\n              {post.frontmatter.shortDate} &middot;{' '}\n              {pluralizeReadingTime(post.timeToRead)}\n            </Legend>\n            <h1 style={{ margin: '2rem auto' }}>\n              {post.frontmatter.published ? '' : 'DRAFT: '}\n              {post.frontmatter.title}\n            </h1>\n            <div\n              style={{\n                margin: `1rem 0`,\n              }}\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n                margin: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link\n                    style={{ textDecoration: `none` }}\n                    to={previous.fields.slug}\n                    rel=\"prev\"\n                  >\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link\n                    style={{ textDecoration: `none` }}\n                    to={next.fields.slug}\n                    rel=\"next\"\n                  >\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n            <Twitter>\n              <FontAwesomeIcon\n                size={SOCIAL[1].size}\n                icon={SOCIAL[1].icon}\n                title={`Link to my ${SOCIAL[1].kind}`}\n              />\n              {' '}\n              <a\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n                href={`https://twitter.com/intent/tweet?text=${publicUrl}`}\n              >\n                Compartilhe no Twitter\n              </a>\n            </Twitter>\n          </Container>\n        )}\n      </Spring>\n    </Layout >\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        shortDate: date(locale: \"pt-br\", formatString: \"MMMM, YYYY\")\n        longDate: date(formatString: \"MMMM DD, YYYY, h:mm:ss a\")\n        description\n        categories\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        coverAuthor\n        coverOriginalUrl\n        keywords\n        published\n      }\n    }\n  }\n`;\n\nexport default Blog","export default function pluralizeReadingTime(time) {\n  return `${time} ${time > 1 ? 'mins' : 'min'} de leitura`;\n}\n"],"sourceRoot":""}