{"version":3,"sources":["webpack://daliannyvieira/./src/templates/blog-post.js","webpack://daliannyvieira/./src/constants/pluralize-reading-time.js"],"names":["Container","styled","animated","data","pageContext","post","markdownRemark","previous","next","publicUrl","fields","slug","useState","toggle","setToggle","useEffect","Spring","native","to","rotate","opacity","time","style","title","frontmatter","description","excerpt","keywords","longDate","shortDate","timeToRead","margin","published","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","Link","textDecoration","rel","target","href"],"mappings":"mOAQMA,GAAYC,QAAOC,gBAAV,0EAAGD,CAAH,myBA0Mf,EA/Ia,SAAC,GAA2B,IAAzBE,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACIC,EAASF,EAAzBG,eACAC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KACZC,EAAS,wCAA2CJ,EAAKK,OAAOC,KAEtE,GAA4BC,eAAS,GAA9BC,EAAP,KAAeC,EAAf,KAUA,OARAC,gBAAU,WAEND,GAAU,KAIX,IAGD,gBAAC,IAAD,KACE,gBAAC,EAAAE,OAAD,CACEC,QAAM,EACNC,GAAI,CACFC,OAAQN,EAAS,OAAS,SAC1BO,QAASP,EAAS,EAAG,KAGtB,gBC3FoCQ,ED2FjCD,EAAH,EAAGA,QAAH,OACC,gBAACpB,EAAD,CACEsB,MAAO,CACLF,QAASA,IAGb,gBAAC,IAAD,CACEG,MAAK,GAAKlB,EAAKmB,YAAYD,MAC3BE,YAAapB,EAAKmB,YAAYC,aAAepB,EAAKqB,QAClDC,SAAUtB,EAAKmB,YAAYG,WAE3B,yBAAOJ,MAAOlB,EAAKmB,YAAYI,UAC5BvB,EAAKmB,YAAYK,UADpB,KACwC,KCvGPR,EDwGThB,EAAKyB,YCvGvC,KAAkBT,EAAO,EAAI,OAAS,OAAtC,eDyGU,sBAAIC,MAAO,CAAES,OAAQ,cAClB1B,EAAKmB,YAAYQ,UAAY,GAAK,UAClC3B,EAAKmB,YAAYD,OAcpB,uBACED,MAAO,CACLS,OAAO,UAETE,wBAAyB,CAAEC,OAAQ7B,EAAK8B,QAE1C,2BACA,sBACEb,MAAO,CACLc,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,EACTT,OAAQ,IAGV,0BACGxB,GACC,gBAAC,EAAAkC,KAAD,CACEnB,MAAO,CAAEoB,eAAe,QACxBxB,GAAIX,EAASG,OAAOC,KACpBgC,IAAI,QAHN,KAKKpC,EAASiB,YAAYD,QAI9B,0BACGf,GACC,gBAAC,EAAAiC,KAAD,CACEnB,MAAO,CAAEoB,eAAe,QACxBxB,GAAIV,EAAKE,OAAOC,KAChBgC,IAAI,QAEHnC,EAAKgB,YAAYD,MALpB,QAUN,6BACE,qBACEqB,OAAO,SACPD,IAAI,+BACJE,KAAI,gCAAkCpC,GAHxC,sBAMK","file":"component---src-templates-blog-post-js-e8ac4058066a8d4d6486.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from \"../components/layout\"\nimport Seo from '../components/seo';\nimport pluralizeReadingTime from \"../constants/pluralize-reading-time\";\nimport styled from 'styled-components';\nimport { Spring, animated } from 'react-spring'\n\nconst Container = styled(animated.div)`\n  width: 80vw;\n  padding: 1rem;\n  border-radius: .5rem;\n  position: relative;\n  border-color: #ffb8d1;\n  border-style: solid;\n  border-width: 1px;\n  background: #fff;\n  box-shadow: 0 4px 6px -1px rgba(0,0,0,.1), 0 2px 4px -1px rgba(0,0,0,.06);\n  border-color: #f5f5f5;\n  border-style: solid;\n  border-width: 1px;\n\n  blockquote {\n    margin: 0;\n  }\n\n  blockquote p {\n    text-align: center;\n    font-size: 1.25rem;\n    line-height: 1.65rem;\n    display: inline-block;\n    margin: 0.8em auto;\n  }\n\n  blockquote::before {\n    content: \"\";\n    display: block;\n    width: 90%;\n    margin: 2rem auto 1rem;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n\n  blockquote::after {\n    content: \"\";\n    display: block;\n    width: 90%;\n    margin: 1rem auto 2rem;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n\n  hr {\n    display: block;\n    width: 90%;\n    margin: 1rem auto 4rem;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n  }\n\n  @media (min-width: 992px) {\n    max-width: 45vw;\n\n    blockquote p {\n      font-size: 1.7rem;\n      line-height: 2rem;\n    }\n  }\n`;\n\nconst Blog = ({ data, pageContext }) => {\n  const { markdownRemark: post } = data;\n  const { previous, next } = pageContext;\n  const publicUrl = `https://daliannyvieira.github.io/blog${post.fields.slug}`;\n\n  const [toggle, setToggle] = useState(true)\n\n  useEffect(() => {\n    function handleToggle() {\n      setToggle(false)\n    }\n\n    handleToggle();\n  }, []);\n\n  return (\n    <Layout>\n      <Spring\n        native\n        to={{\n          rotate: toggle ? '0deg' : '180deg',\n          opacity: toggle ? 0: 1,\n        }}\n        >\n        {({ opacity }) => (\n          <Container\n            style={{\n              opacity: opacity,\n            }}\n          >\n          <Seo\n            title={`${post.frontmatter.title}`}\n            description={post.frontmatter.description || post.excerpt}\n            keywords={post.frontmatter.keywords}\n          />\n            <small title={post.frontmatter.longDate}>\n              {post.frontmatter.shortDate} &middot;{' '}\n              {pluralizeReadingTime(post.timeToRead)}\n            </small>\n            <h1 style={{ margin: '2rem auto' }}>\n              {post.frontmatter.published ? '' : 'DRAFT: '}\n              {post.frontmatter.title}\n            </h1>\n            {/* <div style={{ marginTop: `1rem` }}>\n              <Image\n                fluid={post.frontmatter.cover.childImageSharp.fluid}\n                alt={post.frontmatter.coverAuthor}\n              />\n            </div>\n            <small>\n              Photo by{' '}\n              <a href={post.frontmatter.coverOriginalUrl}>\n                {post.frontmatter.coverAuthor}\n              </a>{' '}\n            </small> */}\n            <div\n              style={{\n                margin: `1rem 0`,\n              }}\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n            <hr />\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n                margin: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link\n                    style={{ textDecoration: `none` }}\n                    to={previous.fields.slug}\n                    rel=\"prev\"\n                  >\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link\n                    style={{ textDecoration: `none` }}\n                    to={next.fields.slug}\n                    rel=\"next\"\n                  >\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n            <small>\n              <a\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n                href={`https://twitter.com/search?q=${publicUrl}`}\n              >\n                Discuss on Twitter\n              </a>{' '}\n            </small>\n          </Container>\n        )}\n      </Spring>\n    </Layout >\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        shortDate: date(formatString: \"MMMM DD, YYYY\")\n        longDate: date(formatString: \"MMMM DD, YYYY, h:mm:ss a\")\n        description\n        categories\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        coverAuthor\n        coverOriginalUrl\n        keywords\n        published\n      }\n    }\n  }\n`;\n\nexport default Blog","export default function pluralizeReadingTime(time) {\n  return `${time} ${time > 1 ? 'mins' : 'min'} de leitura`;\n}\n"],"sourceRoot":""}